{
  parserClass="com.syrency.ocean.language.parser.HydroParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Hydro"
  psiImplClassSuffix="Impl"
  psiPackage="com.syrency.ocean.language.psi"
  psiImplPackage="com.syrency.ocean.language.psi.impl"

  elementTypeHolderClass="com.syrency.ocean.language.psi.HydroTypes"
  elementTypeClass="com.syrency.ocean.language.psi.HydroElementType"
  tokenTypeClass="com.syrency.ocean.language.psi.HydroTokenType"

  generateTokenAccessors = true

  tokens=[
    NUMBER='regexp:-?(([0-9]+)|([0-9]*\.[0-9]+))'
    BOOLEAN='regexp:true|false'
    KEYWORD='regexp:module|using|layout|function|main|this|body|cast|funcp|vref|iref|label|alloc|push|pop|duplicate|rotate|swap|add|subtract|multiply|divide|modulo|leftshift|rightshift|bitwiseand|bitwiseor|bitwisexor|bitwisenot|and|or|xor|not|equal|notequal|lessthan|greaterthan|lessthanequal|greaterthanequal|jump|branch|call|return|load|store|getindex|setindex'
    BASETYPE='regexp:u8|u16|u32|u64|u128|s8|s16|s32|s64|s128|string|bool|any|f32|f64'
    STRING="regexp:(['\"].*['\"])"
    COMMENT='regexp:%.*'
    IDENTIFIER='regexp:[0-9a-zA-Z.\-_\\/]+'
  ]
}

sourceFile ::= module*

module ::= 'module' (IDENTIFIER | main_node) module_body

private module_body ::= (using_node | layout_node | function_node | intrinsic_node)*
using_node ::= 'using' IDENTIFIER
layout_node ::= 'layout' IDENTIFIER layout_member*
layout_member ::= type IDENTIFIER
function_node ::= (('function' IDENTIFIER) | main_node) type* 'body' instruction*
intrinsic_node ::= 'intrinsic' IDENTIFIER type* 'body' intrinsic_target*
intrinsic_target ::= 'target' IDENTIFIER STRING
type ::= (BASETYPE | ('array' NUMBER? type) | type_layout)
type_layout ::= module_name layout_name
main_node ::= 'main'
this_node ::= 'this'
private module_name ::= (IDENTIFIER | main_node | this_node)
private layout_name ::= IDENTIFIER
instruction ::= (
    ('alloc' ('array' NUMBER?)? type)
    | ('push' (type (NUMBER | STRING | BOOLEAN) | func_pointer | ref))
    | 'pop'
    | ('duplicate' NUMBER?)
    | ('rotate' NUMBER)
    | 'swap'
    | 'add'
    | 'subtract'
    | 'multiply'
    | 'divide'
    | 'modulo'
    | 'leftshift'
    | 'rightshift'
    | 'bitwiseand'
    | 'bitwiseor'
    | 'bitwisexor'
    | 'bitwisenot'
    | 'and'
    | 'or'
    | 'xor'
    | 'not'
    | 'equal'
    | 'notequal'
    | 'lessthan'
    | 'greaterthan'
    | 'lessthanequal'
    | 'greaterthanequal'
    | ('label' IDENTIFIER)
    | ('jump' target)
    | ('branch' target target)
    | 'call'
    | 'return'
    | 'load'
    | 'store'
    | ('cast' type)
    | ('getindex' IDENTIFIER?)
    | ('setindex' IDENTIFIER?)
)
target ::= NUMBER | IDENTIFIER
private func_pointer ::= 'funcp' module_name layout_name
private variable_name ::= IDENTIFIER
private index_name ::= IDENTIFIER
ref ::= ('vref' variable_name | 'iref' ref index_name)
