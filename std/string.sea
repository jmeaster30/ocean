# Takes an ascii character and returns the lowercase version 
# of the character if it is a letter
let to_lower = func (value: char) -> (result: char):{
  if value <= 'Z' && value >= 'A' {
    result = value + ('a' - 'A') 
  } else {
    result = value
  }
}

# Takes an ascii character and returns the uppercase version 
# of the character if it is a letter
let to_upper = func (value: char) -> (result: char):{
  if value <= 'z' && value >= 'a' {
    result = value - ('a' - 'A') 
  } else {
    result = value
  }
}

# Takes in a string and returns the lowercase version
# of that string
let to_lower = func (value: string) -> (result: string = value >. to_lower)

# Takes in a string and returns the uppercase version
# of that string
let to_upper = func (value: string) -> (result: string = value >. to_upper)

let is_empty = func (value: string) -> (result: bool = value.length == 0)

let join = func (value: auto T[]) -> (result:T):{
  for v in value {
    result += v
  }
}

let join = func (value: auto T[], sep: auto U) -> (result: T):{
  for i in 0..(value.length) {
    result += value[i]
    if i < value.length - 1 {
      result += sep
    }
  }
}

let split = func (value: string, sep: string) -> (result: string[]):{
  let start = 0
  let i = 0
  while i < value.length - sep.length + 1 {
    let substring = value[i..sep.length]
    if substring == sep {
      if start != i {
        result ++= [value[start..i]]
      }
      i += sep.length - 1
      start = i
    } else {
      i += 1
    }
  }
  # add the remaining bits of the string to result
  if start < value.length {
    result ++= [value[start..value.length]]
  }
}

let split_around = func (value: string, sep: string) -> (result: string[]):{
  let start = 0
  let i = 0
  while i < value.length - sep.length + 1 {
    let substring = value[i..sep.length]
    if substring == sep {
      if start != i {
        result ++= [value[start..i]]
      }
      result ++= [value[i..sep.length]]
      i += sep.length
      start = i
    } else {
      i += 1
    }
  }
  # add the remaining bits of the string to result
  if start < value.length {
    result ++= [value[start..value.length]]
  }
}

let reverse = func (value: string) -> (result: string):{
  for c in value {
    result = c + result
  }
}

