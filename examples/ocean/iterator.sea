interface Iterable(auto Subtype) {
    function current(iterator: Iterable(Subtype)) -> (result: Optional(Subtype)),
    function move(iterator: Iterable(Subtype))
}

pack ArrayIterable(auto Subtype) : Iterable(Subtype) {
    array: Subtype[]
    index: u128
}

@Cast
function array_to_array_enumerable(array: auto Subtype[]) -> (result: ArrayIterable(Subtype) = (array, 0))

pack MapIterable(auto Subtype, auto MappedType) : Iterable(Subtype) {
    iterator: Iterable(Subtype),
    map_function: function (Subtype) -> (MappedType)
}

function map(iterator: Iterable(auto Subtype), map_function: function (Subtype) -> (auto MappedType))
    -> (map_iterator: MapIterable(Subtype, MappedType) = (iterator: iterator, map_function: map_function))

function current(map_iterator: MapIterable(auto Subtype))
    -> (result: Optional(Subtype) =
        match map_iterator.iterator.current() {
            Some(value) => Some(map_iterator.map_function(value));
            None => None;
        })

function move(map_iterator: MapIterable(auto Subtype)) {
    map_iterator.iterator.move();
}

pack FilterIterable(auto Subtype) {
    iterator: Iterable(Subtype),
    filter_function: function (Subtype) -> (bool)
}

function filter(iterator: Iterable(auto Subtype), filter_function: function (Subtype) -> (bool))
    -> (filter_iterator: FilterIterable(Subtype) = (iterator: iterator, filter_function: filter_function))

function current(filter_iterator: FilterIterable(auto Subtype)) -> (result: Optional(Subtype)) {
    loop {
        result = match filter_iterator.current() {
            Some(value) && filter_iterator.filter_function(value) => value;
            Some(_) => {
                filter_iterator.move();
                continue
            }
            None => None;
        }
        break
    }
}

function move(filter_iterator: FilterIterable(auto Subtype)) {
    filter_iterator.iterator.move();
}

using std.io

#/
let test = [1, 2, 3, 4, 5, 6] as ArrayIterable
    .map(function (x: u32) -> (y: i32 = x * 3 + 1))
    .filter(function (x: u32) -> (y: bool = x % 2 == 0))
/#

for x in test {
    println(x);
}

1.this!;

# should print:
# 4
# 10
# 16