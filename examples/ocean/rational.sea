function gcd (a: i64, b: i64) -> (result: i64) {
  # If A=0 then GCD(A, B)=B since the Greatest Common Divisor of 0 and B is B.
  # If B=0 then GCD(A, B)=A since the Greatest Common Divisor of 0 and A is A.
  # Let R be the remainder of dividing A by B assuming A > B. (R = A % B)
  # Find GCD( B, R ) because GCD( A, B ) = GCD( B, R ). Use the above steps again.
  
  while a != 0 || b != 0 {
    let new_a = b
    let new_b = a % b
    a = new_a
    b = new_b
  }
  
  if a == 0 {
    result = b
  } else if b == 0 {
    result = a
  }
}

function abs (a: i64) -> (result: i64) {
  if a < 0 {
    result = -a
  } else {
    result = a
  }
}

function lcm (a: i64,
b: i64)
-> (result: i64
    = abs(a) * abs(b) / gcd(a, b)
    , test: i128 = 123 + 987)

pack rational {
  numerator: i64
  denominator: i64
}

@Operator {a} + {b}
function add (a: rational, b: rational) -> (res: rational) {
  let mul: i64 = lcm(a.denominator, b.denominator)
  res = ( a.numerator * mul + b.numerator * mul, mul )
}

@Operator {a} - {b}
function subtract (a: rational, b: rational) -> (res: rational) {
  let mul: i64 = lcm(a.denominator, b.denominator)
  res = ( a.numerator * mul - b.numerator * mul, mul )
}