pack myPack {
  a: f32
  b: f32
  packFunc: () -> (sum: f32, diff: f32, prod: f32, quot: f32) {
    sum = a + b
    diff = a - b
    prod = a * b
    quot = a / b
  }
}

enum Types {
  a: 0;
  b #= 1
  c #= 2
  d: 10;
}

func: (yeah: auto<T>, oh: T) -> (a: i32, b: i32) {
  switch yeah {
    Types::a -> {
      a = 5
      b = 7 + 13
      continue # this falls through into the b case
    }
    Types::b -> {
      a = b
    }
    Types::c || Types::d -> {
      q = asdff
    }
    default -> {
      what = 5 + 6 * 2
    }
  }
}

main: () -> (ret: i32) {
  if 4 {
    yeah = baby
  } else {
    baby = yeah
  }

  ooo: myPack = (a: 12, b: 32)
  ooo.packFunc()

  why: auto = func(54 * 43, 65 << 23)
}